`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 05/30/2017 12:16:40 PM
// Design Name: 
// Module Name: SHA1_core
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module SHA1_core(
      input clk,
      input rst,
      //input start,
      input [511:0]block_in,
      output done,
      output [159:0]digest_out
    );
//reg start;
reg [31:0]a[80:0],b[80:0],c[80:0],d[80:0],e[80:0];
reg [31:0]h[4:0];
reg [31:0]k[3:0];
reg [31:0]w[79:0];
reg [31:0]wt[63:0];
reg [31:0]temp[79:0];
reg [6:0]w_rounds;
reg [6:0]f_rounds;
reg [1:0]sha1_state;
reg [2:0] curr_state, next_state;
reg [2:0] flag;
parameter SHA1_RESET = 0;
parameter SHA1_INIT = 1;
parameter SHA1_W_ROUNDS = 2;
parameter SHA1_ABCDE_INIT = 3;
parameter SHA1_F0_ROUNDS = 4;
parameter SHA1_F1_ROUNDS = 5;
parameter SHA1_F2_ROUNDS = 6;
parameter SHA1_F3_ROUNDS = 7;

always@(posedge clk or negedge rst) begin
     if(rst == 0) begin
        curr_state <= SHA1_RESET;
        flag <= 0;
     end else begin
        curr_state <= next_state;
     end
         
end
//always@(curr_state)
always@(*) begin
    if(flag == 1)
        next_state = SHA1_INIT;
    else if(flag == 2)
        next_state = SHA1_W_ROUNDS;
    else if(flag == 3)
        next_state = SHA1_ABCDE_INIT;
    else if(flag == 4)
        next_state = SHA1_F0_ROUNDS;
        
end
always@(curr_state) begin
    if(curr_state == SHA1_RESET) begin
        w_rounds = 16;
        f_rounds = 0;
        k[0] = 0;
        k[1] = 0;
        k[2] = 0;
        k[3] = 0;
        h[0] = 0;
        h[1] = 0;
        h[2] = 0;
        h[3] = 0;
        h[4] = 0;
        w[0] = 0;w[1] = 0;w[2] = 0;w[3] = 0;w[4] = 0;w[5] = 0;w[6] = 0;w[7] = 0;w[8] = 0;w[9] = 0;
        w[10] = 0;w[11] = 0;w[12] = 0;w[13] = 0;w[14] = 0;w[15] = 0;w[16] = 0;w[17] = 0;w[18] = 0;w[19] = 0;
        w[20] = 0;w[21] = 0;w[22] = 0;w[23] = 0;w[24] = 0;w[25] = 0;w[26] = 0;w[27] = 0;w[28] = 0;w[29] = 0;
        w[30] = 0;w[31] = 0;w[32] = 0;w[33] = 0;w[34] = 0;w[35] = 0;w[36] = 0;w[37] = 0;w[38] = 0;w[39] = 0;
        w[40] = 0;w[41] = 0;w[42] = 0;w[43] = 0;w[44] = 0;w[45] = 0;w[46] = 0;w[47] = 0;w[48] = 0;w[49] = 0;
        w[50] = 0;w[51] = 0;w[52] = 0;w[53] = 0;w[54] = 0;w[55] = 0;w[56] = 0;w[57] = 0;w[58] = 0;w[59] = 0;
        w[60] = 0;w[61] = 0;w[62] = 0;w[63] = 0;w[64] = 0;w[65] = 0;w[66] = 0;w[67] = 0;w[68] = 0;w[69] = 0;
        w[70] = 0;w[71] = 0;w[72] = 0;w[73] = 0;w[74] = 0;w[75] = 0;w[76] = 0;w[77] = 0;w[78] = 0;w[79] = 0;
        flag = 1;
    end else if(curr_state == SHA1_INIT) begin
        k[0] = 32'h5a827999;
        k[1] = 32'h6ed9eba1;
        k[2] = 32'h8f1bbcdc;
        k[3] = 32'h0xca62c1d6;    
        h[0] = 32'h67452301;
        h[1] = 32'hefcdab89;
        h[2] = 32'h98badcfe;
        h[3] = 32'h10325476;
        h[4] = 32'hc3d2e1f0;
        w[0] = 32'h61626380;
        w[1] = 32'h0;
        w[2] = 32'h0;
        w[3] = 32'h0;
        w[4] = 32'h0;
        w[5] = 32'h0;
        w[6] = 32'h0;
        w[7] = 32'h0;
        w[8] = 32'h0;
        w[9] = 32'h0;
        w[10] = 32'h0;
        w[11] = 32'h0;
        w[12] = 32'h0;
        w[13] = 32'h0;
        w[14] = 32'h0;
        w[15] = 32'h18;  
        flag = 2;   
    end else if(curr_state == SHA1_W_ROUNDS) begin
        wt[0] = w[13]^w[8]^w[2]^w[0];
        w[16] = {wt[0][30:1],wt[0][0]}; //wt << 1
        wt[1] = w[14]^w[9]^w[3]^w[1];
        w[17] = {wt[1][30:1],wt[1][0]};//wt << 1
        wt[2] = w[15]^w[10]^w[4]^w[2];
        w[18] = {wt[2][30:1],wt[2][0]};//wt << 1
        wt[3] = w[16]^w[11]^w[5]^w[3];
        w[19] = {wt[3][30:1],wt[3][0]};//wt << 1
        wt[3] = w[16]^w[11]^w[5]^w[3];
        w[19] = {wt[3][30:1],wt[3][0]};//wt << 1
        wt[4] = w[17]^w[12]^w[6]^w[4];
        w[20] = {wt[4][30:1],wt[4][0]};//wt << 1
        wt[5] = w[18]^w[13]^w[7]^w[5];
        w[21] = {wt[5][30:1],wt[5][0]};//wt << 1
        wt[6] = w[19]^w[14]^w[8]^w[6];
        w[22] = {wt[6][30:1],wt[6][0]};//wt << 1   
        wt[7] = w[20]^w[15]^w[9]^w[7];
        w[23] = {wt[7][30:1],wt[7][0]};//wt << 1  
        wt[8] = w[21]^w[16]^w[10]^w[8];
        w[24] = {wt[8][30:1],wt[8][0]};//wt << 1   
        wt[9] = w[22]^w[17]^w[11]^w[9];
        w[25] = {wt[9][30:1],wt[9][0]};//wt << 1   
        wt[10] = w[23]^w[18]^w[12]^w[10];
        w[26] = {wt[10][30:1],wt[10][0]};//wt << 1   
        wt[11] = w[24]^w[19]^w[13]^w[11];
        w[27] = {wt[11][30:1],wt[11][0]};//wt << 1   
        wt[12] = w[25]^w[20]^w[14]^w[12];
        w[28] = {wt[12][30:1],wt[12][0]};//wt << 1  
        wt[13] = w[26]^w[21]^w[15]^w[13];
        w[29] = {wt[13][30:1],wt[13][0]};//wt << 1  
        wt[14] = w[27]^w[22]^w[16]^w[14];
        w[30] = {wt[14][30:1],wt[14][0]};//wt << 1  
        wt[15] = w[28]^w[23]^w[17]^w[15];
        w[31] = {wt[15][30:1],wt[15][0]};//wt << 1  
        wt[16] = w[29]^w[24]^w[18]^w[16];
        w[32] = {wt[16][30:1],wt[16][0]};//wt << 1  
        wt[17] = w[30]^w[25]^w[19]^w[17];
        w[33] = {wt[17][30:1],wt[17][0]};//wt << 1  
        wt[18] = w[31]^w[26]^w[20]^w[18];
        w[34] = {wt[18][30:1],wt[18][0]};//wt << 1  
        wt[19] = w[32]^w[27]^w[21]^w[19];
        w[35] = {wt[19][30:1],wt[19][0]};//wt << 1  
        wt[20] = w[33]^w[28]^w[22]^w[20];
        w[36] = {wt[20][30:1],wt[20][0]};//wt << 1  
        wt[21] = w[34]^w[29]^w[23]^w[21];
        w[37] = {wt[21][30:1],wt[21][0]};//wt << 1  
        wt[22] = w[35]^w[30]^w[24]^w[22];
        w[38] = {wt[22][30:1],wt[22][0]};//wt << 1  
        wt[23] = w[36]^w[31]^w[25]^w[23];
        w[39] = {wt[23][30:1],wt[23][0]};//wt << 1  
        wt[24] = w[37]^w[32]^w[26]^w[24];
        w[40] = {wt[24][30:1],wt[24][0]};//wt << 1  
        wt[25] = w[38]^w[33]^w[27]^w[25];
        w[41] = {wt[25][30:1],wt[25][0]};//wt << 1  
        wt[26] = w[39]^w[34]^w[28]^w[26];
        w[42] = {wt[26][30:1],wt[26][0]};//wt << 1  
        wt[27] = w[40]^w[35]^w[29]^w[27];
        w[43] = {wt[27][30:1],wt[27][0]};//wt << 1  
        wt[28] = w[41]^w[36]^w[30]^w[28];
        w[44] = {wt[28][30:1],wt[28][0]};//wt << 1  
        wt[29] = w[42]^w[37]^w[31]^w[29];
        w[45] = {wt[29][30:1],wt[29][0]};//wt << 1  
        wt[30] = w[43]^w[38]^w[32]^w[30];
        w[46] = {wt[30][30:1],wt[30][0]};//wt << 1
        wt[31] = w[44]^w[39]^w[33]^w[31];
        w[47] = {wt[31][30:1],wt[31][0]};//wt << 1
        wt[32] = w[45]^w[40]^w[34]^w[32];
        w[48] = {wt[32][30:1],wt[32][0]};//wt << 1
        wt[33] = w[46]^w[41]^w[35]^w[33];
        w[49] = {wt[33][30:1],wt[33][0]};//wt << 1
        wt[34] = w[47]^w[42]^w[36]^w[34];
        w[50] = {wt[34][30:1],wt[34][0]};//wt << 1
        wt[35] = w[48]^w[43]^w[37]^w[35];
        w[51] = {wt[35][30:1],wt[35][0]};//wt << 1
        wt[36] = w[49]^w[44]^w[38]^w[36];
        w[52] = {wt[36][30:1],wt[36][0]};//wt << 1
        wt[37] = w[50]^w[45]^w[39]^w[37];
        w[53] = {wt[37][30:1],wt[37][0]};//wt << 1
        wt[38] = w[51]^w[46]^w[40]^w[38];
        w[54] = {wt[38][30:1],wt[38][0]};//wt << 1
        wt[39] = w[52]^w[47]^w[41]^w[39];
        w[55] = {wt[39][30:1],wt[39][0]};//wt << 1
        wt[40] = w[53]^w[48]^w[42]^w[40];
        w[56] = {wt[40][30:1],wt[40][0]};//wt << 1
        wt[41] = w[54]^w[49]^w[43]^w[41];
        w[57] = {wt[41][30:1],wt[41][0]};//wt << 1
        wt[42] = w[55]^w[50]^w[44]^w[42];
        w[58] = {wt[42][30:1],wt[42][0]};//wt << 1
        wt[43] = w[56]^w[51]^w[45]^w[43];
        w[59] = {wt[43][30:1],wt[43][0]};//wt << 1
        wt[44] = w[57]^w[52]^w[46]^w[44];
        w[60] = {wt[44][30:1],wt[44][0]};//wt << 1
        wt[45] = w[58]^w[53]^w[47]^w[45];
        w[61] = {wt[45][30:1],wt[45][0]};//wt << 1
        wt[46] = w[59]^w[54]^w[48]^w[46];
        w[62] = {wt[46][30:1],wt[46][0]};//wt << 1
        wt[47] = w[60]^w[55]^w[49]^w[47];
        w[63] = {wt[47][30:1],wt[47][0]};//wt << 1
        wt[48] = w[61]^w[56]^w[50]^w[48];
        w[64] = {wt[48][30:1],wt[48][0]};//wt << 1
        wt[49] = w[62]^w[57]^w[51]^w[49];
        w[65] = {wt[49][30:1],wt[49][0]};//wt << 1
        wt[50] = w[63]^w[58]^w[52]^w[50];
        w[66] = {wt[50][30:1],wt[50][0]};//wt << 1
        wt[51] = w[64]^w[59]^w[53]^w[51];
        w[67] = {wt[51][30:1],wt[51][0]};//wt << 1
        wt[52] = w[65]^w[60]^w[54]^w[52];
        w[68] = {wt[52][30:1],wt[52][0]};//wt << 1
        wt[53] = w[66]^w[61]^w[55]^w[53];
        w[69] = {wt[53][30:1],wt[53][0]};//wt << 1
        wt[54] = w[67]^w[62]^w[56]^w[54];
        w[70] = {wt[54][30:1],wt[54][0]};//wt << 1
        wt[55] = w[68]^w[63]^w[57]^w[55];
        w[71] = {wt[55][30:1],wt[55][0]};//wt << 1        
        wt[56] = w[69]^w[64]^w[58]^w[56];
        w[72] = {wt[56][30:1],wt[56][0]};//wt << 1
        wt[57] = w[70]^w[65]^w[59]^w[57];
        w[73] = {wt[57][30:1],wt[57][0]};//wt << 1                
        wt[58] = w[71]^w[66]^w[60]^w[58];
        w[74] = {wt[58][30:1],wt[58][0]};//wt << 1                
        wt[59] = w[72]^w[67]^w[61]^w[59];
        w[75] = {wt[59][30:1],wt[59][0]};//wt << 1                
        wt[60] = w[73]^w[68]^w[62]^w[60];
        w[76] = {wt[60][30:1],wt[60][0]};//wt << 1
        wt[61] = w[74]^w[69]^w[63]^w[61];
        w[77] = {wt[61][30:1],wt[61][0]};//wt << 1  
        wt[62] = w[75]^w[70]^w[64]^w[62];
        w[78] = {wt[62][30:1],wt[62][0]};//wt << 1            
        wt[63] = w[76]^w[71]^w[65]^w[63];
        w[79] = {wt[63][30:1],wt[63][0]};//wt << 1            
        flag = 3;
    end else if(curr_state == SHA1_ABCDE_INIT) begin
        a[0] = h[0];
        b[0] = h[1];
        c[0] = h[2];
        d[0] = h[3];
        e[0] = h[4];
        flag = 4;
    end else if(curr_state == SHA1_F0_ROUNDS) begin
        temp[0] = {a[0][26:0],a[0][31:27]} + ((b[0] & c[0]) | ((~b[0]) & d[0])) + e[0] + w[0] + k[0] ;
        e[1] = d[0];
        d[1] = c[0];   
        c[1] = {b[0][1:0],b[0][31:2]}; // b[t]<<30
        b[1] = a[0];
        a[1] = temp[0];
        flag = 5;
    end

end
endmodule
